// –ì–æ–ª–æ–≤–Ω–∏–π –ø–∞–∫–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–∏
package main

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import (
	"math"
	"math/rand"
	"strings"
	"time"
	"unicode"

	"github.com/gdamore/tcell/v2"
)

// –ó–∞–≤–¥–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä—É—Ö—É –∫–æ—Ä–∞–±–ª—è
type PossibleMovement struct {
	// –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Ä—É—Ö—É (true - –¥–æ–∑–≤–æ–ª–µ–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é, false - –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ)
	canMove func([][]GameCell, Boat) bool
	// –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä—É—Ö—É
	move    func([][]GameCell, Boat) Boat
}

// –ú–∞—Å–∏–≤ –º–æ–∂–ª–∏–≤–∏—Ö —Ä—É—Ö—ñ–≤ –∫–æ—Ä–∞–±–ª—è
var possibleMovements = []PossibleMovement{
	{canMoveUp, moveUp},
	{canMoveDown, moveDown},
	{canMoveLeft, moveLeft},
	{canMoveRight, moveRight},
	{canRotateLeft, rotateLeft},
	{canRotateRight, rotateRight},
}

// –ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
const (
	// –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö –º–µ–∂ –ø–æ–ª—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
	startCol1 int = (screenSizeX*0.5 - (battlefieldSize * 2) - 2) / 2
	// –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É –º–µ–∂ –ø–æ–ª—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
	startRow1 int = (screenSizeY - battlefieldSize - 2) / 2

	// –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö –º–µ–∂ –ø–æ–ª—è –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è
	startCol2 int = (screenSizeX*1.5 - (battlefieldSize * 2) - 2) / 2
	// –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É –º–µ–∂ –ø–æ–ª—è –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è
	startRow2 int = (screenSizeY - battlefieldSize - 2) / 2
)

// –ó–∞–≤–¥–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö

// –Ü–≥—Ä–æ–≤–∞ –º–∞—Ç—Ä–∏—Ü—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è
var player1GameField [][]GameCell
// –Ü–≥—Ä–æ–≤–∞ –º–∞—Ç—Ä–∏—Ü—è –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è
var player2GameField [][]GameCell
// –ï—Ç–∞–ø –≥—Ä–∏ (0 - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è, 0.5 - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –ø–µ—Ä—à–∏–º –≥—Ä–∞–≤—Ü–µ–º, 1 - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—Ä—É–≥–∏–º –≥—Ä–∞–≤—Ü–µ–º, 1.5 - –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –¥—Ä—É–≥–∏–º –≥—Ä–∞–≤—Ü–µ–º, 2 - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º, 2.1 - —Ö—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è, 2.2 - —Ö—ñ–¥ –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è, 2.3 - —Ö—ñ–¥ –®–Ü, 3 - –∫—ñ–Ω–µ—Ü—å –≥—Ä–∏)
var gameState float32
// –ì—Ä–∞–≤–µ—Ü—å —è–∫–∏–π —Ö–æ–¥–∏—Ç—å (true - –≥—Ä–∞–≤–µ—Ü—å 1, false - –≥—Ä–∞–≤–µ—Ü—å 2)
var playerToMove bool
// –ü–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –≥—Ä–∞–≤—Ü—è (true - –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ, false - –Ω–µ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ)
var boatMoved bool
// –û–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∞–±–µ–ª—å –≥—Ä–∞–≤—Ü—è —â–æ —Ö–æ–¥–∏—Ç—å
var selectedBoat Boat

// –î—Ä—É–∫ –º–µ–∂ –ø–æ–ª—è (–µ–∫—Ä–∞–Ω, –≥—Ä–∞–≤–µ—Ü—å (true - –≥—Ä–∞–≤–µ—Ü—å 1, false - –≥—Ä–∞–≤–µ—Ü—å 2))
func printGameFieldBorder(screen tcell.Screen, player bool) {
	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≥—Ä–∞–≤—Ü—è
	var startCol int
	var startRow int
	if player {
		startCol = startCol1
		startRow = startRow1
	} else {
		startCol = startCol2
		startRow = startRow2
	}

	// –ú–∞–ª—é–≤–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ç–∞ –Ω–∏–∂–Ω—å–æ–≥–æ –∫–æ—Ä–¥–æ–Ω—ñ–≤ –ø–æ–ª—è
	for i := 0; i <= battlefieldSize*2+1; i++ {
		screen.SetContent(startCol+i, startRow, '‚ñÑ', nil, tcell.StyleDefault.Foreground(tcell.ColorGray))
		screen.SetContent(startCol+i, startRow+battlefieldSize+1, '‚ñÄ', nil, tcell.StyleDefault.Foreground(tcell.ColorGray))
	}

	// –ú–∞–ª—é–≤–∞–Ω–Ω—è –ª—ñ–≤–æ–≥–æ —Ç–∞ –ø—Ä–∞–≤–æ–≥–æ –∫–æ—Ä–¥–æ–Ω—ñ–≤ –ø–æ–ª—è
	for i := 1; i <= battlefieldSize; i++ {
		screen.SetContent(startCol, startRow+i, '‚ñà', nil, tcell.StyleDefault.Foreground(tcell.ColorGray))
		screen.SetContent(startCol+(battlefieldSize*2)+1, startRow+i, '‚ñà', nil, tcell.StyleDefault.Foreground(tcell.ColorGray))
	}

	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è —Ç–∞ –π–æ–≥–æ –∫–æ–ª—å–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤—Ö—ñ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≥—Ä–∞–≤—Ü—è
	var playerNumber string
	var playerColor tcell.Color
	if player {
		playerNumber = "Player 1"
		playerColor = tcell.ColorBlue
	} else {
		playerNumber = "Player 2"
		playerColor = tcell.ColorRed
	}

	// –ü—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –ø–æ–ª—è
	playerFieldString := playerNumber + " " + "field"
	diff := battlefieldSize*2 + 2 - len(playerFieldString)
	playerFieldStringLong := strings.Repeat(" ", diff/2) + playerFieldString + strings.Repeat(" ", diff-diff/2)
	for i, r := range playerFieldStringLong {
		screen.SetContent(startCol+i, startRow-2, r, nil, tcell.StyleDefault)
	}
	paintCellsRowWithColor(screen, getStringIndex(screen, startRow-2, playerNumber), startRow-2, len(playerNumber), playerColor)
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≥—Ä–∏ (–µ–∫—Ä–∞–Ω)
func updateInterface(screen tcell.Screen) {
	printPlayerTitle(screen)
	printPlayerControls(screen)
}

// –î—Ä—É–∫ –∑–∞–≥–æ–ª–æ–≤—á–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É (–µ–∫—Ä–∞–Ω)
func printPlayerTitle(screen tcell.Screen) {
	clearPlayerTitleScreen(screen)

	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è —â–æ —Ö–æ–¥–∏—Ç—å —Ç–∞ –π–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
	var playerNumber string
	var playerColor tcell.Color
	if playerToMove {
		playerNumber = "Player 1"
		playerColor = tcell.ColorBlue
	} else {
		playerNumber = "Player 2"
		playerColor = tcell.ColorRed
	}
	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥—ñ—ó –≥—Ä–∞–≤—Ü—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –µ—Ç–∞–ø—É –≥—Ä–∏
	var playerAction string
	if gameState < 2 {
		playerAction = "setup"
	} else if gameState < 3 {
		playerAction = "move"
	} else {
		playerAction = "wins!ü•á"
	}

	// –î—Ä—É–∫ –ø—ñ–¥–ø–∏—Å—É
	printStringMiddle(screen, 1, playerNumber+" "+playerAction)
	paintCellsRowWithColor(screen, getStringIndex(screen, 1, playerNumber), 1, len(playerNumber), playerColor)

	// –í–∏–±—ñ—Ä –ø—ñ–¥–∫–∞–∑–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –µ—Ç–∞–ø—É –≥—Ä–∏
	switch gameState {
	// –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó
	case 0, 1, 2:
		printStringMiddle(screen, 2, "Press [Space] when ready")
	// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
	case 0.5, 1.5:
		printStringMiddle(screen, 2, "Press [Space] when finished")
		printStringMiddle(screen, 4, "Setup your boats!")
	// –ó–¥—ñ–π—Å–Ω–µ–Ω–Ω—è —Ö–æ–¥—É - –≤–∏–±—ñ—Ä, —Ä—É—Ö —Ç–∞ –ø–æ—Å—Ç—Ä—ñ–ª —É –≤–æ—Ä–æ–∂–∏–π –∫–æ—Ä–∞–±–ª—å
	case 2.1, 2.2:
		printStringMiddle(screen, 2, "Press [Space] if finished")
		printStringMiddle(screen, 4, "Select, move your OR/AND fire enemy's boat!")
	// –ü–µ—Ä–µ–º–æ–≥–∞ –≥—Ä–∞–≤—Ü—è, –∫—ñ–Ω–µ—Ü—å –≥—Ä–∏
	case 3:
		printStringMiddle(screen, 2, "Press [Space] to exit")
	}

	paintCellsRowWithColor(screen, getStringIndex(screen, 2, "Space"), 2, len("Space"), tcell.ColorWhite.TrueColor())
}

// –î—Ä—É–∫ –ø—ñ–¥–∫–∞–∑–∫–∏ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (–µ–∫—Ä–∞–Ω)
func printPlayerControls(screen tcell.Screen) {
	clearPlayerControlsScreen(screen)

	// –Ø–∫—â–æ –µ—Ç–∞–ø –≥—Ä–∏ –Ω–µ—Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–∏–π (–¥—ñ–π–æ–≤–∏–π) —Ç–∞ —Ö—ñ–¥ –Ω–µ –∑–∞ –®–Ü
	if float64(gameState) != math.Trunc(float64(gameState)) && gameState != 2.3 {
		// –ú–∞—Å–∏–≤–∏ –º–æ–∂–ª–∏–≤–∏—Ö –¥—ñ–π —Ç–∞ –∫–æ–º–∞–Ω–¥ —ó—Ö –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
		actions := []string{"Select", "Move up", "Move down", "Move left", "Move right", "Rotate left", "Rotate right"}
		var controls []string
		if playerToMove {
			controls = []string{"LMB", "W", "S", "A", "D", "Q", "E"}
		} else {
			controls = []string{"LMB", "8", "5", "4", "6", "7", "9"}
		}

		// –Ø–∫—â–æ —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –±—É–ª–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ
		if gameState > 2 {
			// –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–ø—Ü—ñ—ó –ø–æ—Å—Ç—Ä—ñ–ª—É
			actions[0] += "/Fire"
		}

		// –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –¥—ñ–π
		maxActionLength := 0
		for _, action := range actions {
			if len(action) > maxActionLength {
				maxActionLength = len(action)
			}
		}
		// –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –∫–æ–º–∞–Ω–¥
		maxControlLength := 0
		for _, control := range controls {
			if len(control) > maxControlLength {
				maxControlLength = len(control)
			}
		}

		// –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—è –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–æ –æ–¥–Ω—ñ—î—ó –¥–æ–≤–∂–∏–Ω–∏
		for i, action := range actions {
			diff := maxActionLength - len(action)
			actions[i] = strings.Repeat(" ", diff/2) + action + strings.Repeat(" ", diff-diff/2)
		}
		for i, control := range controls {
			diff := maxControlLength - len(control)
			controls[i] = strings.Repeat(" ", diff/2) + control + strings.Repeat(" ", diff-diff/2)
		}

		// –î—Ä—É–∫ –ø—ñ–¥–∫–∞–∑–∫–∏ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω—ñ –µ–∫—Ä–∞–Ω—É
		printStringMiddle(screen, startRow1+2, controls[0]+" "+actions[0])
		for i := 1; i < len(actions); i++ {
			printStringMiddle(screen, startRow1+2+1+i, controls[i]+" "+actions[i])
		}
	}
}

// –û—á–∏—â–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ –µ–∫—Ä–∞–Ω—É –∑ –∑–∞–≥–æ–ª–æ–≤—á–∏–º –ø—ñ–¥–ø–∏—Å–æ–º (–µ–∫—Ä–∞–Ω)
func clearPlayerTitleScreen(screen tcell.Screen) {
	for i := 1; i <= 4; i++ {
		for j := 1; j < screenSizeX-2; j++ {
			screen.SetContent(j, i, ' ', nil, tcell.StyleDefault)
		}
	}
}

// –û—á–∏—â–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ –µ–∫—Ä–∞–Ω—É –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (–µ–∫—Ä–∞–Ω)
func clearPlayerControlsScreen(screen tcell.Screen) {
	for i := startRow1 + 1; i <= startRow1+battlefieldSize; i++ {
		for j := startCol1 + battlefieldSize*2 + 1 + 1; j < startCol2-1; j++ {
			screen.SetContent(j, i, ' ', nil, tcell.StyleDefault)
		}
	}
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–ª—ñ—Ç–∏–Ω–∞ –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö –∫–ª—ñ—Ç–Ω–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É –∫–ª—ñ—Ç–∏–Ω–∏) (true - –≤ –º–µ–∂–∞—Ö, false - –∑–∞ –º–µ–∂–∞–º–∏)
func inGameField(cellX int, cellY int) bool {
	// –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è —î –º–µ–Ω—à–∏–º –∑–∞ 0 –∞–±–æ –ø–µ—Ä–µ–≤–∏—â—É—î —Ä–æ–∑–º—ñ—Ä —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	if cellX < 0 || cellX >= battlefieldSize*2 || cellY < 0 || cellY >= battlefieldSize {
		return false
	} else {
		return true
	}
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –∫–ª—ñ—Ç–∏–Ω–∞ —á–∞—Å—Ç–∏–Ω–æ—é –∫–æ—Ä–∞–±–ª—è (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö –∫–ª—ñ—Ç–Ω–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É –∫–ª—ñ—Ç–∏–Ω–∏) (true - –∫–æ—Ä–∞–±–ª—å, false - –≤—ñ–ª—å–Ω–∞ –¥—ñ–ª—è–Ω–∫–∞)
func isBoat(gameField [][]GameCell, cellX int, cellY int) bool {
	if !inGameField(cellX, cellY) {
		return false
	}
	if gameField[cellX][cellY].VisibleCell.Rune == '‚ñà' {
		return true
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –∫–æ—Ä–∞–±–ª—å –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º (–∫–æ—Ä–∞–±–ª—å) (true - –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, false - —Ü—ñ–ª–∏–π)
func isDamaged(boat Boat) bool {
	for i := 0; i < len(boat.partsDamaged); i++ {
		if boat.partsDamaged[i] {
			return true
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –∫–æ—Ä–∞–±–ª—å –∑–Ω–∏—â–µ–Ω–∏–º (–∫–æ—Ä–∞–±–ª—å) (true - –∑–Ω–∏—â–µ–Ω–∏–π, false - —É –≥—Ä—ñ)
func isDestroyed(boat Boat) bool {
	for i := 0; i < len(boat.partsDamaged); i++ {
		if !boat.partsDamaged[i] {
			return false
		}
	}
	return true
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ—Å—É–≤–Ω–∏–º (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –ø–µ—Ä–µ—Å—É–≤–Ω–∏–π, false - –Ω–µ—Ä—É—Ö–æ–º–∏–π)
func isMoveable(gameField [][]GameCell, boat Boat) bool {
	for _, possibleMovement := range possibleMovements {
		if possibleMovement.canMove(gameField, boat) {
			return true
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –∫–ª—ñ—Ç–∏–Ω–∞ –¥—ñ–ª—è–Ω–∫–∏ –≤—ñ–ª—å–Ω–æ—é –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö –∫–ª—ñ—Ç–∏–Ω–∏ –¥—ñ–ª—è–Ω–∫–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É –∫–ª—ñ—Ç–∏–Ω–∏ –¥—ñ–ª—è–Ω–∫–∏) (true - –≤—ñ–ª—å–Ω–∞, false - –∑–∞–π–Ω—è—Ç–∞)
func isAreaFree(gameField [][]GameCell, areaX int, areaY int) bool {
	if !inGameField(areaX, areaY) {
		return false
	}
	// –ü–µ—Ä–µ–±—ñ—Ä —Å—É–º—ñ–∂–Ω–∏—Ö –∫–ª—ñ—Ç–∏–Ω
	for i := areaX - 2; i <= areaX+2; i += 2 {
		for j := areaY - 1; j <= areaY+1; j++ {
			if isBoat(gameField, i, j) {
				return false
			}
		}
	}
	return true
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —ñ—Å–Ω—É—é—Ç—å –ø–µ—Ä–µ—Å—É–≤–Ω—ñ –∫–æ—Ä–∞–±–ª—ñ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ) (true - —ñ—Å–Ω—É—é—Ç—å, false - –≤—ñ–¥—Å—É—Ç–Ω—ñ)
func areMoveableBoatsExist(gameField [][]GameCell) bool {
	for x, row := range gameField {
		for y, cell := range row {
			// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å —Ç–∞ –Ω–µ –∑–Ω–∏—â–µ–Ω–∏–π
			if cell.VisibleCell.Rune == '‚ñà' && cell.VisibleCell.Style != tcell.StyleDefault.Foreground(tcell.ColorRed) {
				if isMoveable(gameField, getBoatByCell(gameField, x-x%2, y)) {
					return true
				}
			}
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–ø–æ—Ü—ñ–ª–µ–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∏ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ) (true - –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è, false - –Ω–µ–º–∞—î)
func areUnfiredCellsExist(gameField [][]GameCell) bool {
	for _, row := range gameField {
		for _, cell := range row {
			// –Ø–∫—â–æ –≤ –∫–ª—ñ—Ç–∏–Ω—É –Ω–µ —Å—Ç—Ä—ñ–ª—è–ª–∏
			if cell.HiddenCell.Style == tcell.StyleDefault {
				return true
			}
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –≤—Å—ñ –∫–æ—Ä–∞–±–ª—ñ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ –∑–Ω–∏—â–µ–Ω—ñ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ) (true - –∫–æ—Ä–∞–±–ª—ñ –∑–Ω–∏—â–µ–Ω—ñ, false - –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –∫–æ—Ä–∞–±–ª—ñ —É –≥—Ä—ñ)
func isFieldCleared(gameField [][]GameCell) bool {
	for _, row := range gameField {
		for _, cell := range row {
			// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å —Ç–∞ –Ω–µ –∑–Ω–∏—â–µ–Ω–∏–π
			if cell.VisibleCell.Rune == '‚ñà' && cell.VisibleCell.Style != tcell.StyleDefault.Foreground(tcell.ColorRed) {
				return false
			}
		}
	}
	return true
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –±—É—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –º–æ–∂–µ, false - –Ω–µ –º–æ–∂–µ)
func canPlaceBoat(gameField [][]GameCell, boat Boat) bool {
	// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–µ—Å—å –∫–æ—Ä–∞–±–ª—å
	counterX := boat.headX
	counterY := boat.headY
	sizeCounter := 0
	
	// –ü–æ–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
	for sizeCounter < len(boat.partsDamaged) {
		if isAreaFree(gameField, counterX, counterY) {
			// –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
			if boat.orientation {
				counterY++
			} else {
				counterX = counterX + 2
			}
			sizeCounter++
		} else {
			return false
		}
	}
	return true
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—é (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö –∫–ª—ñ—Ç–∏–Ω–∏, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É –∫–ª—ñ—Ç–∏–Ω–∏) (–∫–æ—Ä–∞–±–ª—å)
func getBoatByCell(gameField [][]GameCell, cellX int, cellY int) Boat {
	// –ü–æ–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ—Ä–∞–±–ª—è
	var boatHeadX int
	var boatHeadY int
	var boatOrientation bool
	var boatPartsDamaged []bool

	// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤–µ—Å—å –∫–æ—Ä–∞–±–ª—å
	var counterX int
	var counterY int

	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ—ó –ª—ñ–≤–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ —è–∫ –≥–æ–ª–æ–≤–Ω–æ—ó
	for counterX = cellX; isBoat(gameField, counterX, cellY); counterX -= 2 {
		boatHeadX = counterX
	}
	for counterY = cellY; isBoat(gameField, cellX, counterY); counterY-- {
		boatHeadY = counterY
	}

	// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó –∫–æ—Ä–∞–±–ª—è
	if isBoat(gameField, boatHeadX+2, boatHeadY) {
		boatOrientation = false
	} else {
		boatOrientation = true
	}

	// –ü–µ—Ä–µ–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
	counterX = boatHeadX
	counterY = boatHeadY
	// –ü–æ–∫–∏ –ø–æ—Ç–æ—á–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∞ —î –∫–æ—Ä–∞–±–ª–µ–º
	for isBoat(gameField, counterX, counterY) {
		// –ó–º—ñ–Ω–Ω–∞ —Å—Ç–∞–Ω–æ–º –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ –ø–æ—Ç–æ—á–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ (true - –ø–æ—à–∫–æ–¥–∂–µ–Ω–∞, false - —Ü—ñ–ª–∞)
		var boatPartDamaged bool
		// –Ø–∫—â–æ —á–∞—Å—Ç–∏–Ω–∞ –∫–æ—Ä–∞–±–ª—è –ø–æ—à–∫–æ–¥–∂–µ–Ω–∞
		if gameField[counterX][counterY].VisibleCell.Style == tcell.StyleDefault.Foreground(tcell.ColorRed) {
			boatPartDamaged = true
		} else {
			boatPartDamaged = false
		}
		// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∏–≤—É –≤—Å—ñ—Ö –∫–ª—ñ—Ç–∏–Ω –∫–æ—Ä–∞–±–ª—è
		boatPartsDamaged = append(boatPartsDamaged, boatPartDamaged)
		// –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
		if boatOrientation {
			counterY++
		} else {
			counterX += 2
		}
	}

	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	return Boat{
		headX:        boatHeadX,
		headY:        boatHeadY,
		partsDamaged: boatPartsDamaged,
		orientation:  boatOrientation,
	}
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –¥–æ —ñ–≥—Ä–æ–≤–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å)
func placeBoat(gameField [][]GameCell, boat Boat) {
	// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ —î –∫–æ—Ä–∞–±–ª—å –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º
	boatDamaged := isDamaged(boat)

	// –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó –¥–æ–≤–∂–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
	counterX := boat.headX
	counterY := boat.headY
	sizeCounter := 0

	// –ü–æ–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
	for sizeCounter < len(boat.partsDamaged) {
		// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
		gameField[counterX][counterY].VisibleCell.Rune = '‚ñà'
		gameField[counterX+1][counterY].VisibleCell.Rune = '‚ñà'

		// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –∫–ª—ñ—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –π–æ–≥–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ
		if boat.partsDamaged[sizeCounter] {
			gameField[counterX][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorRed)
			gameField[counterX+1][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorRed)
		} else if boatDamaged {
			gameField[counterX][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorLightPink.TrueColor())
			gameField[counterX+1][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorLightPink.TrueColor())
		} else {
			gameField[counterX][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorGreen)
			gameField[counterX+1][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorGreen)
		}

		// –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Ü–∏–∫–ª—É
		if boat.orientation {
			counterY++
		} else {
			counterX = counterX + 2
		}
		sizeCounter++
	}
}

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å)
func removeBoat(gameField [][]GameCell, boat Boat) {
	// –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó –¥–æ–≤–∂–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
	counterX := boat.headX
	counterY := boat.headY
	sizeCounter := 0

	// –ü–æ–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
	for sizeCounter < len(boat.partsDamaged) {

		gameField[counterX][counterY].VisibleCell = Cell{}
		gameField[counterX+1][counterY].VisibleCell = Cell{}

		// –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Ü–∏–∫–ª—É
		if boat.orientation {
			counterY++
		} else {
			counterX = counterX + 2
		}
		sizeCounter++
	}
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –Ω–∞–≤–µ—Ä—Ö (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –º–æ–∂–µ, false - –Ω—ñ)
func canMoveUp(gameField [][]GameCell, boat Boat) bool {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –í—ñ–¥–∫–ª–∞–¥–µ–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
	defer placeBoat(gameField, boat)
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –∞–±–æ –æ–¥–Ω–æ–∫–ª—ñ—Ç–∏–Ω–Ω–∏–π
	if boat.orientation || len(boat.partsDamaged) == 1 {
		// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∫–ª—ñ—Ç–∏–Ω–æ—é –≤–∏—â–µ
		if canPlaceBoat(gameField, Boat{
			headX:        boat.headX,
			headY:        boat.headY - 1,
			partsDamaged: boat.partsDamaged,
			orientation:  boat.orientation,
		}) {
			return true
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –≤–Ω–∏–∑ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –º–æ–∂–µ, false - –Ω—ñ)
func canMoveDown(gameField [][]GameCell, boat Boat) bool {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –í—ñ–¥–∫–ª–∞–¥–µ–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
	defer placeBoat(gameField, boat)
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –∞–±–æ –æ–¥–Ω–æ–∫–ª—ñ—Ç–∏–Ω–Ω–∏–π
	if boat.orientation || len(boat.partsDamaged) == 1 {
		// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∫–ª—ñ—Ç–∏–Ω–æ—é –Ω–∏–∂—á–µ
		if canPlaceBoat(gameField, Boat{
			headX:        boat.headX,
			headY:        boat.headY + 1,
			partsDamaged: boat.partsDamaged,
			orientation:  boat.orientation,
		}) {
			return true
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –≤–ª—ñ–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –º–æ–∂–µ, false - –Ω—ñ)
func canMoveLeft(gameField [][]GameCell, boat Boat) bool {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –í—ñ–¥–∫–ª–∞–¥–µ–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
	defer placeBoat(gameField, boat)
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –∞–±–æ –æ–¥–Ω–æ–∫–ª—ñ—Ç–∏–Ω–Ω–∏–π
	if !boat.orientation || len(boat.partsDamaged) == 1 {
		// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∫–ª—ñ—Ç–∏–Ω–æ—é –ª—ñ–≤—ñ—à–µ
		if canPlaceBoat(gameField, Boat{
			headX:        boat.headX - 2,
			headY:        boat.headY,
			partsDamaged: boat.partsDamaged,
			orientation:  boat.orientation,
		}) {
			return true
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∞–±–ª—å –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏—Å—è –≤–ø—Ä–∞–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –º–æ–∂–µ, false - –Ω—ñ)
func canMoveRight(gameField [][]GameCell, boat Boat) bool {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –í—ñ–¥–∫–ª–∞–¥–µ–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
	defer placeBoat(gameField, boat)
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –∞–±–æ –æ–¥–Ω–æ–∫–ª—ñ—Ç–∏–Ω–Ω–∏–π
	if !boat.orientation || len(boat.partsDamaged) == 1 {
		// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∫–ª—ñ—Ç–∏–Ω–æ—é –ø—Ä–∞–≤—ñ—à–µ
		if canPlaceBoat(gameField, Boat{
			headX:        boat.headX + 2,
			headY:        boat.headY,
			partsDamaged: boat.partsDamaged,
			orientation:  boat.orientation,
		}) {
			return true
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∞–±–ª—å —Ä–æ–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤–ª—ñ–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –º–æ–∂–µ, false - –Ω—ñ)
func canRotateLeft(gameField [][]GameCell, boat Boat) bool {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –í—ñ–¥–∫–ª–∞–¥–µ–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
	defer placeBoat(gameField, boat)
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –Ω–µ –æ–¥–Ω–æ–∫–ª—ñ—Ç–∏–Ω–Ω–∏–π
	if len(boat.partsDamaged) != 1 {
		// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π
		if boat.orientation {
			// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∑ —ñ–Ω—à–æ—é –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—î—é
			if canPlaceBoat(gameField, Boat{
				headX:        boat.headX,
				headY:        boat.headY,
				partsDamaged: boat.partsDamaged,
				orientation:  !boat.orientation,
			}) {
				return true
			}
		  // –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π
		} else {
			// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∑ —ñ–Ω—à–æ—é –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—î—é 
			if canPlaceBoat(gameField, Boat{
				headX:        boat.headX,
				headY:        boat.headY - (len(boat.partsDamaged) - 1),
				partsDamaged: boat.partsDamaged,
				orientation:  !boat.orientation,
			}) {
				return true
			}
		}
	}
	return false
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∞–±–ª—å —Ä–æ–∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤–ø—Ä–∞–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (true - –º–æ–∂–µ, false - –Ω—ñ)
func canRotateRight(gameField [][]GameCell, boat Boat) bool {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –í—ñ–¥–∫–ª–∞–¥–µ–Ω–µ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –Ω–∞ —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
	defer placeBoat(gameField, boat)
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –Ω–µ –æ–¥–Ω–æ–∫–ª—ñ—Ç–∏–Ω–Ω–∏–π
	if len(boat.partsDamaged) != 1 {
		// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π
		if boat.orientation {
			// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∑ —ñ–Ω—à–æ—é –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—î—é
			if canPlaceBoat(gameField, Boat{
				headX:        boat.headX - (len(boat.partsDamaged)-1)*2,
				headY:        boat.headY,
				partsDamaged: boat.partsDamaged,
				orientation:  !boat.orientation,
			}) {
				return true
			}
		  // –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π
		} else {
			// –Ø–∫—â–æ –º–æ–∂–Ω–∞ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –∫–æ—Ä–∞–±–ª—å –∑ —ñ–Ω—à–æ—é –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—î—é
			if canPlaceBoat(gameField, Boat{
				headX:        boat.headX,
				headY:        boat.headY,
				partsDamaged: boat.partsDamaged,
				orientation:  !boat.orientation,
			}) {
				return true
			}
		}
	}
	return false
}

// –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –Ω–∞–≤–µ—Ä—Ö (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (–∫–æ—Ä–∞–±–ª—å)
func moveUp(gameField [][]GameCell, boat Boat) Boat {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –ù–æ–≤–∏–π –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å
	movedBoat := Boat{
		headX:        boat.headX,
		headY:        boat.headY - 1,
		partsDamaged: boat.partsDamaged,
		orientation:  boat.orientation,
	}
	// –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	placeBoat(gameField, movedBoat)
	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	return movedBoat
}

// –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –≤–Ω–∏–∑ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (–∫–æ—Ä–∞–±–ª—å)
func moveDown(gameField [][]GameCell, boat Boat) Boat {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –ù–æ–≤–∏–π –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å
	movedBoat := Boat{
		headX:        boat.headX,
		headY:        boat.headY + 1,
		partsDamaged: boat.partsDamaged,
		orientation:  boat.orientation,
	}
	// –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	placeBoat(gameField, movedBoat)
	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	return movedBoat
}

// –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –≤–ª—ñ–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (–∫–æ—Ä–∞–±–ª—å)
func moveLeft(gameField [][]GameCell, boat Boat) Boat {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –ù–æ–≤–∏–π –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å
	movedBoat := Boat{
		headX:        boat.headX - 2,
		headY:        boat.headY,
		partsDamaged: boat.partsDamaged,
		orientation:  boat.orientation,
	}
	// –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	placeBoat(gameField, movedBoat)
	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	return movedBoat
}

// –ü–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –≤–ø—Ä–∞–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (–∫–æ—Ä–∞–±–ª—å)
func moveRight(gameField [][]GameCell, boat Boat) Boat {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –ù–æ–≤–∏–π –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å
	movedBoat := Boat{
		headX:        boat.headX + 2,
		headY:        boat.headY,
		partsDamaged: boat.partsDamaged,
		orientation:  boat.orientation,
	}
	// –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	placeBoat(gameField, movedBoat)
	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	return movedBoat
}

// –ü–æ–≤–æ—Ä–æ—Ç –∫–æ—Ä–∞–±–ª—è –≤–ª—ñ–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (–∫–æ—Ä–∞–±–ª—å)
func rotateLeft(gameField [][]GameCell, boat Boat) Boat {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –ù–æ–≤–∏–π –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å
	var movedBoat Boat
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –±—É–≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π
	if boat.orientation {
		movedBoat = Boat{
			headX:        boat.headX,
			headY:        boat.headY,
			partsDamaged: boat.partsDamaged,
			orientation:  !boat.orientation,
		}
	  // –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –±—É–≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π
	} else {
		movedBoat = Boat{
			headX:        boat.headX,
			headY:        boat.headY - (len(boat.partsDamaged) - 1),
			partsDamaged: boat.partsDamaged,
			orientation:  !boat.orientation,
		}
	}
	// –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	placeBoat(gameField, movedBoat)
	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	return movedBoat
}

// –ü–æ–≤–æ—Ä–æ—Ç –∫–æ—Ä–∞–±–ª—è –≤–ø—Ä–∞–≤–æ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å) (–∫–æ—Ä–∞–±–ª—å)
func rotateRight(gameField [][]GameCell, boat Boat) Boat {
	// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	removeBoat(gameField, boat)
	// –ù–æ–≤–∏–π –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å
	var movedBoat Boat
	// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –±—É–≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π
	if boat.orientation {
		movedBoat = Boat{
			headX:        boat.headX - (len(boat.partsDamaged)-1)*2,
			headY:        boat.headY,
			partsDamaged: boat.partsDamaged,
			orientation:  !boat.orientation,
		}
	  // –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –±—É–≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π
	} else {
		movedBoat = Boat{
			headX:        boat.headX,
			headY:        boat.headY,
			partsDamaged: boat.partsDamaged,
			orientation:  !boat.orientation,
		}
	}
	// –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	placeBoat(gameField, movedBoat)
	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
	return movedBoat
}

// –í–∏–¥—ñ–ª–µ–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª—ñ (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å)
func selectBoat(gameField [][]GameCell, boat Boat) {
	// –Ø–∫—â–æ –º–æ–∂–ª–∏–≤–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä—É—Ö—É, –ø–æ–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–ø—Ä—è–º–æ–∫ –Ω–∞ –ø–æ–ª—ñ
	if canMoveUp(gameField, boat) {
		gameField[boat.headX][boat.headY-1].VisibleCell.Rune = '‚Üë'
	}
	if canMoveDown(gameField, boat) {
		gameField[boat.headX+1][boat.headY+len(boat.partsDamaged)].VisibleCell.Rune = '‚Üì'
	}
	if canMoveLeft(gameField, boat) {
		gameField[boat.headX-1][boat.headY].VisibleCell.Rune = '‚Üê'
	}
	if canMoveRight(gameField, boat) {
		gameField[boat.headX+len(boat.partsDamaged)*2][boat.headY].VisibleCell.Rune = '‚Üí'
	}
	if canRotateLeft(gameField, boat) {
		if boat.orientation {
			gameField[boat.headX+2][boat.headY].VisibleCell.Rune = '‚Ü∫'
		} else {
			gameField[boat.headX][boat.headY-1].VisibleCell.Rune = '‚Ü∫'
		}
	}
	if canRotateRight(gameField, boat) {
		if boat.orientation {
			gameField[boat.headX-1][boat.headY].VisibleCell.Rune = '‚Üª'
		} else {
			gameField[boat.headX][boat.headY+1].VisibleCell.Rune = '‚Üª'
		}
	}
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—Å—Ç—Ä—ñ–ª—É –∫–æ—Ä–∞–±–ª–µ–º (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ö –ø–æ—Å—Ç—Ä—ñ–ª—É, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —É –ø–æ—Å—Ç—Ä—ñ–ª—É) (true - –≤–ª—É—á–∞–Ω–Ω—è, false - –ø—Ä–æ–º–∞—Ö)
func fire(gameField [][]GameCell, cellX int, cellY int) bool {
	// –Ø–∫—â–æ –≤–ª—É—á–µ–Ω–Ω—è –≤ —Ü—ñ–ª—å
	if gameField[cellX][cellY].VisibleCell.Rune == '‚ñà' {
		// –§–∞—Ä–±—É–≤–∞–Ω–Ω—è –∫–ª—ñ—Ç–∏–Ω–∏ –≤ —è–∫—É –ø–æ—Ç—Ä–∞–ø–∏–≤ –ø–æ—Å—Ç—Ä—ñ–ª
		gameField[cellX][cellY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorRed)
		gameField[cellX+1][cellY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorRed)
		// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ—Ä–∞–±–ª—è –ø—ñ—Å–ª—è –ø–æ—Ä–∞–Ω–µ–Ω–Ω—è
		firedBoat := getBoatByCell(gameField, cellX, cellY)

		// –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó –¥–æ–≤–∂–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
		counterX := firedBoat.headX
		counterY := firedBoat.headY
		sizeCounter := 0

		// –ü–æ–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
		for sizeCounter < len(firedBoat.partsDamaged) {
			// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –±—É–≤ –Ω–µ–ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π
			if gameField[counterX][counterY].VisibleCell.Style == tcell.StyleDefault.Foreground(tcell.ColorGreen) {
				// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É –≤–∏–¥–∏–º–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
				gameField[counterX][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorLightPink.TrueColor())
				gameField[counterX+1][counterY].VisibleCell.Style = tcell.StyleDefault.Foreground(tcell.ColorLightPink.TrueColor())
			}

			// –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Ü–∏–∫–ª—É
			if firedBoat.orientation {
				counterY++
			} else {
				counterX = counterX + 2
			}
			sizeCounter++
		}

		// –Ø–∫—â–æ –ø–æ—Å—Ç—Ä—ñ–ª–æ–º –∫–æ—Ä–∞–±–ª—å –±—É–ª–æ –∑–Ω–∏—â–µ–Ω–æ
		if isDestroyed(firedBoat) {
			// –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó –¥–æ–≤–∂–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
			counterX = firedBoat.headX
			counterY = firedBoat.headY
			sizeCounter := 0

			// –ü–æ–∫–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
			for sizeCounter < len(firedBoat.partsDamaged) {
				// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∫–æ–ª—å–æ—Ä—É –Ω–∞–≤–∫–æ–ª–∏—à–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω –∫–æ—Ä–∞–±–ª—è
				for i := counterX - 2; i <= counterX+2; i += 2 {
					for j := counterY - 1; j <= counterY+1; j++ {
						if inGameField(i, j) {
							if !isBoat(gameField, i, j) {
								hiddenCell := Cell{
									Rune:  '‚ñë',
									Style: tcell.StyleDefault.Foreground(tcell.ColorBlue),
								}
								gameField[i][j].HiddenCell = hiddenCell
								gameField[i+1][j].HiddenCell = hiddenCell
							}
						}
					}
				}
				// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∫–æ–ª—å–æ—Ä—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è —è–∫ –∑–Ω–∏—â–µ–Ω–æ—ó
				hiddenCell := Cell{
					Rune:  '‚ñì',
					Style: tcell.StyleDefault.Foreground(tcell.ColorRed),
				}
				gameField[counterX][counterY].HiddenCell = hiddenCell
				gameField[counterX+1][counterY].HiddenCell = hiddenCell

				// –Ü–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Ü–∏–∫–ª—É
				if firedBoat.orientation {
					counterY++
				} else {
					counterX = counterX + 2
				}
				sizeCounter++
			}
		  // –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –±—É–ª–æ –ø–æ—Ä–∞–Ω–µ–Ω–æ
		} else {
			// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∫–æ–ª—å–æ—Ä—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è —è–∫ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ—ó
			hiddenCell := Cell{
				Rune:  '‚ñë',
				Style: tcell.StyleDefault.Foreground(tcell.ColorLightPink.TrueColor()),
			}
			gameField[cellX][cellY].HiddenCell = hiddenCell
			gameField[cellX+1][cellY].HiddenCell = hiddenCell
		}
		// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª—É—á–∞–Ω–Ω—è
		return true
	  // –Ø–∫—â–æ –ø—Ä–æ–º–∞—Ö	
	} else {
		// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∫–æ–ª—å–æ—Ä—É –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ —è–∫ –Ω–µ–∑–∞–π–Ω—è—Ç–æ—ó
		hiddenCell := Cell{
			Rune:  '‚ñë',
			Style: tcell.StyleDefault.Foreground(tcell.ColorBlue),
		}
		gameField[cellX][cellY].HiddenCell = hiddenCell
		gameField[cellX+1][cellY].HiddenCell = hiddenCell
		// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–º–∞—Ö—É
		return false
	}
}

// –ü—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ –∫–æ—Ä–∞–±–ª—è (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–æ—Ä–∞–±–ª—å)
func unselectBoat(gameField [][]GameCell, boat Boat) {
	// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ö–≤–æ—Å—Ç–∞ (–æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏) –∫–æ—Ä–∞–±–ª—è
	boatTailX := boat.headX
	boatTailY := boat.headY
	// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ö–≤–æ—Å—Ç–∞ (–æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏) –∫–æ—Ä–∞–±–ª—è
	if boat.orientation {
		boatTailY += len(boat.partsDamaged) - 1
	} else {
		boatTailX += (len(boat.partsDamaged) - 1) * 2
	}
	// –ü—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –≤—Å—ñ –Ω–∞–≤–∫–æ–ª–∏—à–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∏ –∫–æ—Ä–∞–±–ª—è
	for x := boat.headX - 1; x <= boatTailX+2; x++ {
		for y := boat.headY - 1; y <= boatTailY+1; y++ {
			if inGameField(x, y) {
				if !isBoat(gameField, x, y) {
					gameField[x][y].VisibleCell = Cell{}
				}
			}
		}
	}
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∞–±–ª—ñ–≤) (—ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ)
func createRandomGameField(boatsAmount int) [][]GameCell {
	// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–≥—Ä–æ–≤–æ—ó –º–∞—Ç—Ä–∏—Ü—ñ
	gameField := make([][]GameCell, battlefieldSize*2)
	for i := 0; i < battlefieldSize*2; i++ {
		gameField[i] = make([]GameCell, battlefieldSize)
	}

	// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	placedBoats := 0
	boatSize := 1
	boatMaxSize := 4

	// –Ø–∫—â–æ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ—Ä–æ–∑–º—ñ—â–µ–Ω—ñ –∫–æ—Ä–∞–±–ª—ñ
	for placedBoats < boatsAmount {
		// –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –∫–ª—ñ—Ç–∏–Ω–∏ —Ç–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó –∫–æ—Ä–∞–±–ª—è
		randX := rand.Intn(battlefieldSize * 2)
		randY := rand.Intn(battlefieldSize)
		randBool := rand.Intn(2) == 1

		// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
		boat := Boat{
			headX:        randX - randX%2,
			headY:        randY,
			partsDamaged: make([]bool, boatSize),
			orientation:  randBool,
		}

		if canPlaceBoat(gameField, boat) {
			// –†–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—è —É –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ –≤—ñ–ª—å–Ω–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ
			placeBoat(gameField, boat)
			placedBoats++
			// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ä–æ–∑–º—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è (1=>2=>3=>4=>1=>2=>3=>1=>2=>1)
			if boatSize == boatMaxSize {
				boatMaxSize--
				boatSize = 1
			} else {
				boatSize++
			}
		}
	}

	// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	return gameField
}

// –î—Ä—É–∫ –≤–º—ñ—Å—Ç—É —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–µ–∫—Ä–∞–Ω, —Å—Ç–∞–Ω –≤—ñ–¥–∫—Ä–∏—Ç–æ—Å—Ç—ñ (0 - –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ, 1 - –æ–±–º–µ–∂–µ–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–µ, 2 - –ø–æ–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–∫—Ä–∏—Ç–µ), —Å—Ç–∞–Ω –¥–∏–Ω–∞–º—ñ–∫–∏ (0 - –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∏–Ω–∞–º—ñ–∫–∏, 1 - –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥—Ä—É–∫ –∑ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –ª—ñ–≤–æ–≥–æ –∫—É—Ç–∞, 2 - –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥—Ä—É–∫ –∑ –Ω–∏–∂–Ω—å–æ–≥–æ –ø—Ä–∞–≤–æ–≥–æ –∫—É—Ç–∞), –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å, –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫, —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ)
func printGameField(screen tcell.Screen, openState int, dynamicState int, startCol int, startRow int, gameField [][]GameCell) {
	// –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –¥—Ä—É–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –∫–æ–º—ñ—Ä–æ–∫ –∫–æ–Ω—Å–æ–ª—ñ –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –∫—É—Ç–∞
	for k := 0; k < battlefieldSize*2-1; k++ {
		for i := 0; i <= k; i++ {
			j := k - i
			// –Ø–∫—â–æ –¥–∞–Ω–∞ —ñ—Ç–µ—Ä–∞—Ü—ñ—è –≤ –º–µ–∂–∞—Ö —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
			if i < battlefieldSize && j < battlefieldSize {
				// –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å
				var c int
				// –ü–æ—Ç–æ—á–Ω–∏–π —Ä—è–¥–æ–∫
				var r int
				if dynamicState == 2 {
					// –í—ñ–¥–ª—ñ–∫ –∑ –∫—ñ–Ω—Ü—è
					c = (battlefieldSize - 1 - i) * 2
					r = battlefieldSize - 1 - j
				} else {
					// –í—ñ–¥–ª—ñ–∫ –∑ –ø–æ—á–∞—Ç–∫—É
					c = i * 2
					r = j
				}
				// –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∏
				var cellL Cell
				// –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∏
				var cellR Cell
				// –í–∏–±—ñ—Ä –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –≤—ñ–¥–∫—Ä–∏—Ç–æ—Å—Ç—ñ –ø–æ–ª—è
				switch openState {
				case 0:
					cellL = Cell{Rune: '‚ñí', Style: tcell.StyleDefault.Foreground(tcell.ColorGray)}
					cellR = Cell{Rune: '‚ñí', Style: tcell.StyleDefault.Foreground(tcell.ColorGray)}
				case 1:
					cellL = gameField[c][r].HiddenCell
					cellR = gameField[c+1][r].HiddenCell
				case 2:
					cellL = gameField[c][r].VisibleCell
					cellR = gameField[c+1][r].VisibleCell
					// –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∞ –Ω–µ —î –∫–ª—ñ—Ç–∏–Ω–æ—é –∫–æ—Ä–∞–±–ª—è
					if cellL.Rune != '‚ñà' {
						// –Ø–∫—â–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∞ –º–∞—î —è–∫–µ—Å—å –∑–Ω–∞—á–µ–Ω–Ω—è
						if gameField[c][r].HiddenCell.Rune != 0 && gameField[c+1][r].HiddenCell.Rune != 0 {
							cellL.Style = tcell.StyleDefault.Foreground(tcell.ColorBlue)
							cellR.Style = tcell.StyleDefault.Foreground(tcell.ColorBlue)
							if cellL.Rune == 0 && cellR.Rune == 0 {
								cellL.Rune = '‚ñë'
								cellR.Rune = '‚ñë'
							}
						}
					}
				}
				// –û–¥–Ω–æ—á–∞—Å–Ω–∏–π –¥—Ä—É–∫ –ª—ñ–≤–æ—ó —Ç–∞ –ø—Ä–∞–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –∫–ª—ñ—Ç–∏–Ω–∏
				screen.SetContent(startCol+1+c, startRow+1+r, cellL.Rune, nil, cellL.Style)
				screen.SetContent(startCol+1+c+1, startRow+1+r, cellR.Rune, nil, cellR.Style)
			}
		}
		if dynamicState != 0 {
			// –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –¥—Ä—É–∫—É
			screen.Show()
			time.Sleep(time.Millisecond * 40)
		}
	}
}

// –†—É—Ö –∫–æ—Ä–∞–±–ª—è –∑–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é (–µ–∫—Ä–∞–Ω, —Ä–µ–∂–∏–º –≥—Ä–∏ (0 - –Ω–µ –æ–±—Ä–∞–Ω–æ, 1 - –ø—Ä–æ—Ç–∏ –≥—Ä–∞–≤—Ü—è, 2 - –ø—Ä–æ—Ç–∏ –®–Ü), –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å, –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—è–¥–æ–∫, —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –º–æ–∂–ª–∏–≤–∏–π —Ä—É—Ö)
func moveIfPossible(screen tcell.Screen, gameModeState int, startCol int, startRow int, gameField [][]GameCell,
	possibleMovement PossibleMovement) {
	// –Ø–∫—â–æ –º–æ–∂–Ω–∞ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –¥—ñ—é —Ç–∞ –∫–æ—Ä–∞–±–ª—å —â–µ –Ω–µ –±—É–≤ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π
	if possibleMovement.canMove(gameField, selectedBoat) && !boatMoved {
		unselectBoat(gameField, selectedBoat)
		selectedBoat = possibleMovement.move(gameField, selectedBoat)
		// –Ø–∫—â–æ –µ—Ç–∞–ø –≥—Ä–∏ –º–∞—î –¥—Ä–æ–±–æ–≤—É —á–∞—Å—Ç–∏–Ω—É 0.5 (–µ—Ç–∞–ø –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∞–±–ª—ñ–≤)
		if float64(gameState)-0.5 == math.Trunc(float64(gameState)) {
			selectBoat(gameField, selectedBoat)
			printGameField(screen, 2, 0, startCol, startRow, gameField)
		} else {
			if isDamaged(selectedBoat) {
				printGameField(screen, 2, 0, startCol, startRow, gameField)
				makeMove(screen, gameModeState)
			} else {
				printGameField(screen, 2, 0, startCol, startRow, gameField)
				boatMoved = true
			}
		}
	}
}

// –ü–æ–¥—ñ—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è —Å–∏–º–≤–æ–ª—å–Ω–æ—ó –∫–ª–∞–≤—ñ—à—ñ (–µ–∫—Ä–∞–Ω, —Ä–µ–∂–∏–º –≥—Ä–∏ (0 - –Ω–µ –æ–±—Ä–∞–Ω–æ, 1 - –ø—Ä–æ—Ç–∏ –≥—Ä–∞–≤—Ü—è, 2 - –ø—Ä–æ—Ç–∏ –®–Ü), —Å–∏–º–≤–æ–ª)
func keyRuneEvent(screen tcell.Screen, gameModeState int, r rune) {
	// –Ø–∫—â–æ –Ω–µ –æ–±—Ä–∞–Ω–æ –∫–æ—Ä–∞–±–ª—å –∞–±–æ –≥—Ä–∞ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è
	if selectedBoat.partsDamaged == nil || gameState == 3 {
		return
	}

	// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Ç–∞ –π–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
	var gameField [][]GameCell
	var startCol int
	var startRow int

	if playerToMove {
		gameField = player1GameField
		startCol = startCol1
		startRow = startRow1
		// –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–ª–∞–≤—ñ—à–∞ –Ω–µ —î –ª—ñ—Ç–µ—Ä–æ—é (–Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è)
		if !unicode.IsLetter(r) {
			return
		}
	} else {
		gameField = player2GameField
		startCol = startCol2
		startRow = startRow2
		// –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–ª–∞–≤—ñ—à–∞ –Ω–µ —î —Ü–∏—Ñ—Ä–æ—é (–Ω–µ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞–≤—Ü—è)
		if !unicode.IsDigit(r) {
			return
		}
	}

	// –í–∏–±—ñ—Ä –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —Å–∏–º–≤–æ–ª—É –∑ –∫–ª–∞–≤—ñ—à—ñ
	switch unicode.ToLower(r) {
	case 'w', '—Ü', '8':
		// –†—É—Ö –Ω–∞–≤–µ—Ä—Ö
		moveIfPossible(screen, gameModeState, startCol, startRow, gameField, possibleMovements[0])
	case 's', '—ã', '—ñ', '5':
		// –†—É—Ö –≤–Ω–∏–∑
		moveIfPossible(screen, gameModeState, startCol, startRow, gameField, possibleMovements[1])
	case 'a', '—Ñ', '4':
		// –†—É—Ö –≤–ª—ñ–≤–æ
		moveIfPossible(screen, gameModeState, startCol, startRow, gameField, possibleMovements[2])
	case 'd', '–≤', '6':
		// –†—É—Ö –≤–ø—Ä–∞–≤–æ
		moveIfPossible(screen, gameModeState, startCol, startRow, gameField, possibleMovements[3])
	case 'q', '–π', '7':
		// –ü–æ–≤–æ—Ä–æ—Ç –≤–ª—ñ–≤–æ
		moveIfPossible(screen, gameModeState, startCol, startRow, gameField, possibleMovements[4])
	case 'e', '—É', '9':
		// –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
		moveIfPossible(screen, gameModeState, startCol, startRow, gameField, possibleMovements[5])
	}
}

// –ü–æ–¥—ñ—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ª—ñ–≤–æ—ó –∫–Ω–æ–ø–∫–∏ –º–∏—à—ñ (–µ–∫—Ä–∞–Ω, —Ä–µ–∂–∏–º –≥—Ä–∏ (0 - –Ω–µ –æ–±—Ä–∞–Ω–æ, 1 - –ø—Ä–æ—Ç–∏ –≥—Ä–∞–≤—Ü—è, 2 - –ø—Ä–æ—Ç–∏ –®–Ü), –ø–æ–∑–∏—Ü—ñ—è –ø–æ —Ö, –ø–æ–∑–∏—Ü—ñ—è –ø–æ —É)
func mouseClickEvent(screen tcell.Screen, gameModeState int, x int, y int) {
	if gameState == 3 {
		return
	}

	// –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ —Ç–∞ —ó—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≥—Ä–∞–≤—Ü—ñ–≤ - –∞—Ç–∞–∫—É—é—á–æ—ó —Ç–∞ –æ–±–æ—Ä–æ–Ω—è—é—á–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏
	var playerGameField [][]GameCell
	var opponentGameField [][]GameCell
	var playerStartCol int
	var playerStartRow int
	var opponentStartCol int
	var opponentStartRow int

	if playerToMove {
		playerGameField = player1GameField
		opponentGameField = player2GameField
		playerStartCol = startCol1
		playerStartRow = startRow1
		opponentStartCol = startCol2
		opponentStartRow = startRow2
	} else {
		playerGameField = player2GameField
		opponentGameField = player1GameField
		playerStartCol = startCol2
		playerStartRow = startRow2
		opponentStartCol = startCol1
		opponentStartRow = startRow1
	}

	// –Ø–∫—â–æ –µ—Ç–∞–ø –≥—Ä–∏ –Ω–µ—Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–∏–π (–¥—ñ–π–æ–≤–∏–π)
	if float64(gameState) != math.Trunc(float64(gameState)) {
		if selectedBoat.partsDamaged != nil {
			unselectBoat(playerGameField, selectedBoat)
			printGameField(screen, 2, 0, playerStartCol, playerStartRow, playerGameField)
		}

		// –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è –≥—Ä–∞–≤—Ü—è —â–æ —Ö–æ–¥–∏—Ç—å
		if inGameField(x-1-playerStartCol, y-1-playerStartRow) {
			if !boatMoved {
				// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª—ñ—Ç–∏–Ω–∏ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≥—Ä–∞–≤—Ü—è –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é –º–∏—à—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ
				boatX := (x - 1 - playerStartCol) - (x-1-playerStartCol)%2
				boatY := y - playerStartRow - 1
				// –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∞ –∫–æ—Ä–∞–±–ª—è —â–æ —É –≥—Ä—ñ
				if isBoat(playerGameField, boatX, boatY) && !isDestroyed(getBoatByCell(playerGameField, boatX, boatY)) {
					selectedBoat = getBoatByCell(playerGameField, boatX, boatY)
					selectBoat(playerGameField, selectedBoat)
					printGameField(screen, 2, 0, playerStartCol, playerStartRow, playerGameField)
				}
			}
		  // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è —Å—É–ø–µ—Ä–Ω–∏–∫–∞
		} else if inGameField(x-1-opponentStartCol, y-1-opponentStartRow) && selectedBoat.partsDamaged != nil {
			// –Ø–∫—â–æ —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –±—É–ª–æ —Ä–æ–∑–ø–æ—á–∞—Ç–æ
			if gameState > 2 {
				// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–ª—ñ—Ç–∏–Ω–∏ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å—É–ø–µ—Ä–Ω–∏–∫–∞ –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é –º–∏—à—ñ –≤ –∫–æ–Ω—Å–æ–ª—ñ
				cellX := (x - 1 - opponentStartCol) - (x - 1 - opponentStartCol)%2
				cellY := y - 1 - opponentStartRow
				// –ü–æ—Å—Ç—Ä—ñ–ª, —è–∫—â–æ –≤–ª—É—á–Ω–∏–π
				if fire(opponentGameField, cellX, cellY) {
					printGameField(screen, 1, 0, opponentStartCol, opponentStartRow, opponentGameField)
					unselectBoat(playerGameField, selectedBoat)
					printGameField(screen, 2, 0, playerStartCol, playerStartRow, playerGameField)
					boatMoved = true
					// –Ø–∫—â–æ –¥–æ–±–∏—Ç–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ—Ä–∞–±–ª—å
					if isFieldCleared(opponentGameField) {
						gameState = 3
						updateInterface(screen)
					}
				  // –Ø–∫—â–æ –ø—Ä–æ–º–∞—Ö
				} else {
					printGameField(screen, 1, 0, opponentStartCol, opponentStartRow, opponentGameField)
					makeMove(screen, gameModeState)
				}
			}
		}
	}
}

// –ó–¥—ñ–π—Å–Ω–µ–Ω–Ω—è —Ö–æ–¥—É –®–Ü (–µ–∫—Ä–∞–Ω)
func AIMove(screen tcell.Screen) {
	// –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ü–∏–∫–ª –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏ –≤–∏—Ö–æ–¥—É
	for true {
		// –í–∏–±—ñ—Ä 2 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è
		randX := rand.Intn(battlefieldSize * 2)
		randY := rand.Intn(battlefieldSize)
		// –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
		boatX := randX - randX%2
		boatY := randY
		if isBoat(player2GameField, boatX, boatY) {
			// –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ—Ä–∞–±–ª—å –∑–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
			randBoat := getBoatByCell(player2GameField, boatX, boatY)
			if !isDestroyed(randBoat) {
				// –Ø–∫—â–æ —ñ—Å–Ω—É—é—Ç—å –ø–µ—Ä–µ—Å—É–≤–Ω—ñ –∫–æ—Ä–∞–±–ª—ñ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ —Ç–∞ –∫–æ—Ä–∞–±–ª—å —â–µ –Ω–µ –±—É–ª–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ
				if areMoveableBoatsExist(player2GameField) && !boatMoved {
					if isMoveable(player2GameField, randBoat) {
						// –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –Ω–µ–ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, –∞–±–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä—É—Ö—É –∑–∞–º—ñ—Å—Ç—å –ø–æ—Å—Ç—Ä—ñ–ª—É –∑ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é 50% –¥–ª—è –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ–≥–æ –∫–æ—Ä–∞–±–ª—è
						if !isDamaged(randBoat) || rand.Intn(2) == 1 {
							// –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ü–∏–∫–ª –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏ –≤–∏—Ö–æ–¥—É
							for true {
								// –í–∏–ø–∞–¥–∫–æ–≤–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è –º–∞—Å–∏–≤—É –º–æ–∂–ª–∏–≤–∏—Ö —Ä—É—Ö—ñ–≤
								randI := rand.Intn(6)
								// –Ø–∫—â–æ —Ä—É—Ö –º–æ–∂–Ω–∞ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏
								if possibleMovements[randI].canMove(player2GameField, randBoat) {
									// –ó–∞—Ç—Ä–∏–º–∫–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É –®–Ü
									screen.Show()
									time.Sleep(time.Second)
									// –†—É—Ö –∫–æ—Ä–∞–±–ª—è
									possibleMovements[randI].move(player2GameField, randBoat)
									boatMoved = true
									// –Ø–∫—â–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å –±—É–≤ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–º - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ö–æ–¥—É, –≤–∏—Ö—ñ–¥ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó
									if isDamaged(randBoat) {
										gameState = 2
										return
									  // –Ø–∫—â–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å —Ü—ñ–ª–∏–π, –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ—Å—Ç—Ä—ñ–ª—É
									} else {
										break
									}
								}
							}
						}
					  // –Ø–∫—â–æ –∫–æ—Ä–∞–±–ª—å –Ω–µ—Ä—É—Ö–æ–º–∏–π - –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—à—É–∫—É –ø–µ—Ä–µ—Å—É–≤–Ω–æ–≥–æ
					} else {
						continue
					}
				}

				// –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–∏–π —Ü–∏–∫–ª –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏ –≤–∏—Ö–æ–¥—É
				for true {
					// –í–∏–±—ñ—Ä 2 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è
					randX2 := rand.Intn(battlefieldSize * 2)
					randY2 := rand.Intn(battlefieldSize)
					// –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
					boatX2 := randX2 - randX2%2
					boatY2 := randY2
					// –Ø–∫—â–æ –ø–æ—Å—Ç—Ä—ñ–ª –Ω–µ —É –≤–∂–µ –∑–Ω–∏—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å, —Ç–∞ –Ω–µ –≤ –∫–ª—ñ—Ç–∏–Ω—É —â–æ –≤–∂–µ –±—É–ª–∞ –ø–æ—Ü—ñ–ª–µ–Ω–∞, —è–∫—â–æ –∑–∞–ª–∏—â–∞—é—Ç—å—Å—è –Ω–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ
					if player1GameField[boatX2][boatY2].HiddenCell.Style != tcell.StyleDefault.Foreground(tcell.ColorRed) &&
						(player1GameField[boatX2][boatY2].HiddenCell.Style == tcell.StyleDefault || !areUnfiredCellsExist(player1GameField)) {
						printGameField(screen, 2, 0, startCol1, startRow1, player1GameField)
						// –ó–∞—Ç—Ä–∏–º–∫–∞ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É –®–Ü
						screen.Show()
						time.Sleep(time.Second)
						// –ü–æ—Å—Ç—Ä—ñ–ª, —è–∫—â–æ –≤–ª—É—á–Ω–∏–π
						if fire(player1GameField, boatX2, boatY2) {
							// –Ø–∫—â–æ –¥–æ–±–∏—Ç–∏–π –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ—Ä–∞–±–ª—å
							if isFieldCleared(player1GameField) {
								gameState = 3
								updateInterface(screen)
								return
							  // –Ø–∫—â–æ —â–µ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –∫–æ—Ä–∞–±–ª—ñ –≤ –≥—Ä—ñ - –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤–æ–≥–Ω—é
							} else {
								continue
							}
						  // –Ø–∫—â–æ –ø—Ä–æ–º–∞—Ö
						} else {
							// –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ö–æ–¥—É, –≤–∏—Ö—ñ–¥ –∑ —Ñ—É–Ω–∫—Ü—ñ—ó
							gameState = 2
							return
						}
					  // –Ø–∫—â–æ –≤ –∫–ª—ñ—Ç–∏–Ω—ñ –∑–Ω–∏—â–µ–Ω–∏–π –∫–æ—Ä–∞–±–ª—å, –∞–±–æ –≤–æ–Ω–∞ –≤–∂–µ –±—É–ª–∞ –ø–æ—Ü—ñ–ª–µ–Ω–∞, –∫–æ–ª–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ - –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—à—É–∫—É
					} else {
						continue
					}
				}
			}
		}
	}
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–≥–æ–≤–æ–≥–æ —Ö–æ–¥—É (–µ–∫—Ä–∞–Ω, —Ä–µ–∂–∏–º –≥—Ä–∏ (0 - –Ω–µ –æ–±—Ä–∞–Ω–æ, 1 - –ø—Ä–æ—Ç–∏ –≥—Ä–∞–≤—Ü—è, 2 - –ø—Ä–æ—Ç–∏ –®–Ü))
func makeMove(screen tcell.Screen, gameModeState int) {
	boatMoved = false
	// –í–∏–±—ñ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ –µ—Ç–∞–ø—É –≥—Ä–∏, –ø–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
	switch gameState {
	case 0:
		gameState = 0.5
		if gameModeState == 2 {
			printGameField(screen, 2, 0, startCol1, startRow1, player1GameField)
		} else {
			printGameField(screen, 2, 1, startCol1, startRow1, player1GameField)
		}
	case 0.5:
		unselectBoat(player1GameField, selectedBoat)
		selectedBoat = Boat{}
		printGameField(screen, 2, 0, startCol1, startRow1, player1GameField)
		if gameModeState == 2 {
			gameState = 2.1
			printGameField(screen, 1, 1, startCol2, startRow2, player2GameField)
			playerToMove = true
		} else {
			gameState = 1
			printGameField(screen, 0, 2, startCol1, startRow1, player1GameField)
			playerToMove = false
		}
	case 1:
		gameState = 1.5
		printGameField(screen, 2, 2, startCol2, startRow2, player2GameField)
	case 1.5:
		unselectBoat(player2GameField, selectedBoat)
		selectedBoat = Boat{}
		printGameField(screen, 2, 0, startCol2, startRow2, player2GameField)
		gameState = 2
		printGameField(screen, 0, 1, startCol2, startRow2, player2GameField)
		// –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –≥—Ä–∞–≤—Ü—è —â–æ —Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–º —É –≥—Ä—ñ
		playerToMove = rand.Intn(2) == 1
	case 2:
		if gameModeState == 2 {
			printGameField(screen, 2, 0, startCol1, startRow1, player1GameField)
			printGameField(screen, 1, 0, startCol2, startRow2, player2GameField)
			if playerToMove {
				gameState = 2.1
			} else {
				gameState = 2.3
				// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—É —Ö–æ–¥—É –∑–∞ –®–Ü
				makeMove(screen, gameModeState)
			}
		} else {
			if playerToMove {
				gameState = 2.1
				printGameField(screen, 2, 1, startCol1, startRow1, player1GameField)
				printGameField(screen, 1, 1, startCol2, startRow2, player2GameField)
			} else {
				gameState = 2.2
				printGameField(screen, 2, 2, startCol2, startRow2, player2GameField)
				printGameField(screen, 1, 2, startCol1, startRow1, player1GameField)
			}
		}
	case 2.1:
		unselectBoat(player1GameField, selectedBoat)
		selectedBoat = Boat{}
		printGameField(screen, 2, 0, startCol1, startRow1, player1GameField)
		if gameModeState == 2 {
			gameState = 2.3
			playerToMove = !playerToMove
			updateInterface(screen)
			// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—É —Ö–æ–¥—É –∑–∞ –®–Ü
			makeMove(screen, gameModeState)
		} else {
			gameState = 2
			printGameField(screen, 0, 2, startCol2, startRow2, player2GameField)
			printGameField(screen, 0, 2, startCol1, startRow1, player1GameField)
			playerToMove = !playerToMove
		}
	case 2.2:
		unselectBoat(player2GameField, selectedBoat)
		selectedBoat = Boat{}
		printGameField(screen, 2, 0, startCol2, startRow2, player2GameField)
		gameState = 2
		printGameField(screen, 0, 1, startCol1, startRow1, player1GameField)
		printGameField(screen, 0, 1, startCol2, startRow2, player2GameField)
		playerToMove = !playerToMove
	case 2.3:
		AIMove(screen)
		printGameField(screen, 2, 0, startCol1, startRow1, player1GameField)
		if gameState != 3 {
			playerToMove = !playerToMove
			updateInterface(screen)
			// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ—Ö–æ–¥—É —Ö–æ–¥—É –∑–∞ –®–Ü
			makeMove(screen, gameModeState)
		}
	case 3:
		// –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –µ–∫—Ä–∞–Ω—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
		gameBegin = false
		eraseScreenDynamically(screen)
		beginMenu(screen)
	}

	updateInterface(screen)
}

// –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
func beginPlay(screen tcell.Screen, gameModeState int, gameDataState int, boatsAmount int) {
	// –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏—Ö–æ–¥—É –∑ –≥—Ä–∏ (true - –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ, false - –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ)
	confirmExitState := false

	// –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Ä–µ–∂–∏–º—É –≥—Ä–∏
	var filename string
	switch gameModeState {
	case 1:
		filename = "save1.txt"
	case 2:
		filename = "save2.txt"
	}

	printAuthor(screen)

	setDefaultExitState(screen)

	printGameFieldBorder(screen, true)
	printGameFieldBorder(screen, false)

	// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä–∏
	if gameDataState == 1 {
		createSaveFile(filename)
		player1GameField = createRandomGameField(boatsAmount)
		player2GameField = createRandomGameField(boatsAmount)
		playerToMove = true
		boatMoved = false
		gameState = 0
	  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –≥—Ä–∏
	} else {
		saveData := readSaveFile(filename)
		player1GameField = saveData.player1GameField
		player2GameField = saveData.player2GameField
		playerToMove = saveData.playerToMove
		boatMoved = saveData.boatMoved
		gameState = 2
	}

	printGameField(screen, 0, 0, startCol1, startRow1, player1GameField)
	printGameField(screen, 0, 0, startCol2, startRow2, player2GameField)

	updateInterface(screen)

	// –†–µ–∂–∏–º –≥—Ä–∏ –ø—Ä–æ—Ç–∏ –®–Ü
	if gameModeState == 2 {
		makeMove(screen, gameModeState)
	}

	drawScreenDynamically(screen, false)

	// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π
	for {
		// –Ø–∫—â–æ –≥—Ä–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è
		if !gameBegin {
			break
		}

		// –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π
		ev := screen.PollEvent()

		switch ev := ev.(type) {
		// –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ
		case *tcell.EventKey:
			// –í–∏–±—ñ—Ä –∫–ª–∞–≤—ñ—à—ñ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —ó—ó —Ç–∏–ø—É
			switch ev.Key() {
			// –ó–≤–∏—á–∞–π–Ω–∞ —Å–∏–º–≤–æ–ª—å–Ω–∞ –∫–ª–∞–≤—ñ—à–∞
			case tcell.KeyRune:
				// –ö–ª–∞–≤—ñ—à–∞ Space
				if ev.Rune() == ' ' {
					makeMove(screen, gameModeState)
				  // –ö–ª–∞–≤—ñ—à–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
				} else {
					keyRuneEvent(screen, gameModeState, ev.Rune())
				}

			// –ö–ª–∞–≤—ñ—à–∞ Esc
			case tcell.KeyEscape:
				if confirmExitState {
					confirmExitState = false
					setDefaultExitState(screen)
				} else {
					confirmExitState = true
					dataSaved := gameState != 3
					setConfirmExitState(screen, dataSaved)
				}
			// –ö–ª–∞–≤—ñ—à–∞ Enter
			case tcell.KeyEnter:
				if confirmExitState {
					// –Ø–∫—â–æ –µ—Ç–∞–ø –≥—Ä–∏ –Ω–µ—Ü—ñ–ª–æ—á–∏—Å–µ–ª—å–Ω–∏–π (–¥—ñ–π–æ–≤–∏–π)
					if float64(gameState) != math.Trunc(float64(gameState)) {
						if playerToMove {
							unselectBoat(player1GameField, selectedBoat)
							selectedBoat = Boat{}
							printGameField(screen, 2, 0, startCol1, startRow1, player1GameField)
						} else {
							unselectBoat(player2GameField, selectedBoat)
							selectedBoat = Boat{}
							printGameField(screen, 2, 0, startCol2, startRow2, player2GameField)
						}
					}
					// –Ø–∫—â–æ –≤–ª–∞—Å–Ω–µ —ñ–≥—Ä–æ–≤–∏–π –ø—Ä–æ—Ü–µ—Å —Å–∞–º–æ—ó –≥—Ä–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ, –∞–ª–µ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
					if gameState >= 2 && gameState < 3 {
						writeSaveFile(filename, SaveData{
							player1GameField,
							player2GameField,
							playerToMove,
							boatMoved,
						})
					}

					// –û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –µ–∫—Ä–∞–Ω—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
					gameBegin = false
					eraseScreenDynamically(screen)
					beginMenu(screen)
				}
			}
		// –†—É—Ö –∞–±–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –º–∏—à—ñ
		case *tcell.EventMouse:
			// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó –∫–Ω–æ–ø–∫–∏ —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó –º–∏—à—ñ
			button := ev.Buttons()
			x, y := ev.Position()

			// –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –ª—ñ–≤–∞ –∫–Ω–æ–ø–∫–∞
			if button&tcell.Button1 != 0 {
				mouseClickEvent(screen, gameModeState, x, y)
			}
		}

		// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–∫—Ä–∞–Ω—É
		screen.Show()
	}
}